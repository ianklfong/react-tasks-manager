import * as React from 'react';
import { SpringHelperConfig } from 'react-motion';
import { ResizableDirection } from 're-resizable';
import { Pane, PaneProps } from './pane';
declare global {
    interface Window {
        TouchEvent: TouchEvent;
    }
}
export declare type PaneKey = string | number | null;
export declare type PaneSize = {
    width: number;
    height: number;
};
export declare type PaneProperty = {
    key: PaneKey;
    ref: Element | null;
};
export declare type PaneDirection = 'horizontal' | 'vertical';
export declare type PaneResizeDirection = 'x' | 'y' | 'xy';
export declare type PaneMode = 'add' | 'remove';
export declare type SortablePaneProps = {
    direction?: 'horizontal' | 'vertical';
    margin?: number;
    style?: React.CSSProperties;
    onResize?: (e: MouseEvent | TouchEvent, key: PaneKey, dir: PaneResizeDirection, elementRef: HTMLElement, delta: PaneSize) => void;
    onResizeStop?: (e: MouseEvent | TouchEvent, key: PaneKey, dir: PaneResizeDirection, elementRef: HTMLElement, delta: PaneSize) => void;
    onResizeStart?: (e: React.MouseEvent<HTMLElement> | React.TouchEvent<HTMLElement>, key: PaneKey, dir: PaneResizeDirection) => void;
    onDragStart?: (e: React.MouseEvent<HTMLElement> | React.TouchEvent<HTMLElement>, key: PaneKey, elementRef: HTMLElement) => void;
    onDragStop?: (e: MouseEvent | TouchEvent, key: PaneKey, elementRef: HTMLElement, order: string[]) => void;
    onOrderChange?: (order: string[]) => void;
    className?: string;
    disableEffect?: boolean;
    isSortable?: boolean;
    dragHandleClassName?: string;
    defaultOrder?: string[];
    order?: string[];
    springConfig?: SpringHelperConfig;
    children: React.ReactElement<PaneProps>[];
};
declare type State = {
    delta: number;
    mouse: number;
    isPressed: boolean;
    lastPressed: number;
    isResizing: boolean;
    panes: Array<PaneProperty>;
};
declare class SortablePane extends React.Component<SortablePaneProps, State> {
    panesWrapper: HTMLDivElement;
    resizeObserver: ResizeObserver;
    sizePropsUpdated: boolean;
    debounceUpdate: () => void;
    static defaultProps: {
        direction: string;
        style: {};
        children: never[];
        margin: number;
        onClick: () => null;
        onTouchStart: () => null;
        onResizeStart: () => null;
        onResize: () => null;
        onResizeStop: () => null;
        onDragStart: () => null;
        onDragStop: () => null;
        onOrderChange: () => null;
        className: string;
        disableEffect: boolean;
        isSortable: boolean;
        springConfig: SpringHelperConfig;
    };
    constructor(props: SortablePaneProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: SortablePaneProps): void;
    componentWillUnmount(): void;
    readonly order: number[];
    readonly panes: PaneProperty[];
    onResize(i: number, e: MouseEvent | TouchEvent, dir: ResizableDirection, elementRef: HTMLElement, delta: PaneSize): void;
    getPaneSizeList(): Array<number>;
    /**
     * Find the position sum of halfway points of panes surrounding a given pane
     *
     *  |-------------|
     *  |             | ---> 'previous' halfway
     *  |-------------|
     *                  <--- margin
     *  |-------------|
     *  | currentPane |
     *  |-------------|
     *                  <--- margin
     *  |-------------|
     *  |             |
     *  |             | ---> 'next' halfway
     *  |             |
     *  |-------------|
     *
     *
     * @param  {number}   currentPane - Index of reference pane
     * @param  {number[]} sizes       - Array of pane sizes
     * @param  {number}   margin      - The margin between panes
     * @return {object}               - Object containing 'previous' and 'next'
     *                                  pane halfway points
     */
    getSurroundingHalfSizes: (currentPane: number, sizes: number[], margin: number) => {
        previous: number;
        next: number;
    };
    /**
     * Determine where a particular pane should be ordered
     *
     * @param  {number} position     - Top of the current pane
     * @param  {number} paneIndex    - Index of the pane
     * @return {number}              - New index of the pane based on position
     */
    getItemCountByPosition(position: number, paneIndex: number): number;
    getItemPositionByIndex(index: number): number;
    isHorizontal(): boolean;
    addPane(): void;
    removePane(): void;
    handleResizeStart(i: number, e: React.MouseEvent<HTMLElement> | React.TouchEvent<HTMLElement>, dir: ResizableDirection): void;
    handleResizeStop(i: number, e: MouseEvent | TouchEvent, dir: ResizableDirection, elementRef: HTMLElement, delta: PaneSize): void;
    handleMouseDown(pos: number, pressX: number, pressY: number, e: React.MouseEvent<HTMLElement> | React.TouchEvent<HTMLElement>): void;
    handleMove({ pageX, pageY }: {
        pageX: number;
        pageY: number;
    }): void;
    handleTouchStart(key: number, x: number, y: number, e: React.TouchEvent<HTMLElement>, child: React.ReactElement<PaneProps>): void;
    handleTouchMove(e: TouchEvent): void;
    handleMouseUp(e: MouseEvent | TouchEvent): void;
    renderPanes(): JSX.Element[];
    render(): JSX.Element;
}
export { Pane, SortablePane };
