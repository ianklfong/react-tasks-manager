{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\genhk\\\\OneDrive\\\\Desktop\\\\ellie's\\\\taskm\\\\react-tasks-manager\\\\task-manager\\\\src\\\\Components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport $ from 'jquery'; // import styled components\n\nimport styled from 'styled-components'; // import bootstrap\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'; // import Toggle Task Form Button\n\nimport TaskFormToggle from './TaskFormToggle'; //import Sidebar\n\nimport SideBar from './SideBar';\nimport HomePage from './HomePage';\nimport TaskForm from './TaskForm';\nimport ListsPage from './ListsPage';\nimport Main from './Main'; //database\n\nimport { collection, doc, getDocs, addDoc, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { testCollectionRef } from '../db';\nimport { db } from '../firebase-config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Body = styled.div`\n  padding: 0;\n  overflow: hidden;\n`;\nconst MainRow = styled.div`\n  height: 100vh;\n  overflow: hidden\n`;\n_c = MainRow;\n\nfunction App() {\n  _s();\n\n  // const allTasksRef = collection(db, \"task\")\n  // useEffect(() => { \n  //   const createTask = async () => {\n  //     // await addDoc(testCollectionRef, { title: newTask.title , notes: newTask.notes, date: newTask.Date});\n  //     await addDoc(testCollectionRef, {});}\n  //     createTask();\n  // }, [])\n  // state of new task input\n  const [newTask, setNewTask] = useState({});\n  const [allTasks, setAllTasks] = useState(null); // upload to db \n\n  const createTask = async () => {\n    await addDoc(testCollectionRef, {\n      title: newTask.title,\n      notes: newTask.notes,\n      date: newTask.date\n    });\n  }; //data retrieveal \n\n\n  useEffect(() => {\n    const getTest = async () => {\n      const data = await getDocs(testCollectionRef);\n      setAllTasksList(data.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      })));\n    };\n\n    getTest();\n  }, []); //remove items individually\n\n  const deleteToDoItem = async id => {\n    const toDoItemDB = doc(db, \"task\", id);\n    await deleteDoc(toDoItemDB);\n  };\n\n  const [allTasksList, setAllTasksList] = useState([]); // lists for dnd\n  // const [list, setList] = useState({})\n  // const [allLists, setAllLists] = useState([])\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const newTaskIds = Array.from(allTasksList);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n    const newColumn = newTaskIds;\n    setAllTasksList(newColumn);\n    console.log('123');\n  }; // new task form input\n\n\n  const handleChange = _ref => {\n    let {\n      target\n    } = _ref;\n    // insert corresponding name and input as porperty [name] & value in the newTask object\n    const {\n      name,\n      value\n    } = target; // generate id for each task\n\n    const id = Date.now();\n    setNewTask(prevNewTask => ({ ...prevNewTask,\n      [name]: value,\n      id: id,\n      done: false\n    }));\n    console.log(allTasks);\n  }; //submit task\n\n\n  const handleSubmit = event => {\n    // prevent default action\n    // event.preventDefault();\n    // shift new task in all tasks list (before previous task(s))\n    setAllTasks(prevAllTasks => ({ ...prevAllTasks,\n      [newTask.id]: newTask\n    })); // add task id to all tasks list\n\n    setAllTasksList(prev => [...prev, newTask.id]); // empty the value of newTask\n\n    setNewTask({});\n    createTask();\n  }; //Remove tasks marked as done\n\n\n  const handleRemoveDone = e => {\n    e.preventDefault();\n    setAllTasksList(allTasksList.filter(task => {\n      //keep tasks haven't been done on list, for later return\n      const taskToKeep = allTasks[task].done === false; // delete task(s) done\n\n      if (allTasks[task].done === true) {\n        delete allTasks[task];\n      }\n\n      return taskToKeep;\n    }));\n  };\n\n  const handleRemoveTask = taskId => {\n    delete allTasks[taskId];\n    setAllTasksList(allTasksList.filter(task => task !== taskId));\n  }; // edit task detail\n\n\n  const handleEditTask = (taskId, content) => {\n    setAllTasks(prevAllTasks => ({ ...prevAllTasks,\n      [taskId]: content\n    }));\n  }; // // toggle task done status\n\n\n  const handleToggleDone = taskId => {\n    setAllTasks(prevAllTasks => ({ ...prevAllTasks,\n      [taskId]: { ...allTasks[taskId],\n        done: !allTasks[taskId].done\n      }\n    }));\n  }; // useEffect(() => {\n  //   await addDoc(testCollectionRef, allTasks);\n  // }, [allTasks])\n  // Toggle add task form\n\n\n  useEffect(() => {\n    $(document).ready(function () {\n      $('#addTask').on(\"click\", function () {\n        $(\"#taskForm\").toggleClass(\"active\");\n        $(\"#addBtn\").toggleClass(\"active\");\n      });\n    });\n  }, []); // fetch local data from local storge on page loaded\n\n  useEffect(() => {\n    if (!allTasks) {\n      // fetch data from local storage\n      const data = localStorage.getItem('testing-task'); // add the parsed data to allTasks\n\n      setAllTasks(JSON.parse(data));\n    }\n  }, []);\n  useEffect(() => {\n    const updateToDoItem = async id => {\n      const testDoc = doc(db, \"allTasks\", id); // const newFields = allTasks\n\n      await updateDoc(testDoc, {\n        allTasks\n      });\n    };\n  }); //   setAllTasks(null)\n  //   updateToDoItem('testtask')\n  // }, [allTasks])\n\n  useEffect(() => {\n    // fetch data from local storage\n    const data = localStorage.getItem('testing-task-list'); // add the parsed data to allTasks\n\n    setAllTasksList(JSON.parse(data));\n  }, []); // store tasks to local storage while adding task\n\n  useEffect(() => {\n    localStorage.setItem('testing-task', JSON.stringify(allTasks));\n  }, [allTasks, allTasksList]);\n  useEffect(() => {\n    localStorage.setItem('testing-task-list', JSON.stringify(allTasksList));\n  }, [allTasksList]);\n\n  const updateDoc = async () => {\n    const allTasksDoc = doc(db, \"testAllTasks\", \"123\");\n    const newFields = {\n      allTasks: 'react'\n    };\n    await updateDoc(newFields, allTasksDoc);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(TaskFormToggle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      style: {\n        padding: 0,\n        overflow: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(MainRow, {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(SideBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            style: {\n              height: '100vh'\n            },\n            children: [/*#__PURE__*/_jsxDEV(HomePage, {\n              allTasksList: allTasksList,\n              allTasks: allTasks,\n              handleRemoveDone: handleRemoveDone,\n              onDragEnd: onDragEnd,\n              handleEditTask: handleEditTask,\n              handleToggleDone: handleToggleDone,\n              handleRemoveTask: handleRemoveTask,\n              deleteToDoItem: deleteToDoItem\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ListsPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n          newTask: newTask,\n          handleSubmit: handleSubmit,\n          handleChange: handleChange,\n          updateDoc: updateDoc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/3h0JnhO2+qHNwgpnoAQa9wD++8=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MainRow\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/genhk/OneDrive/Desktop/ellie's/taskm/react-tasks-manager/task-manager/src/Components/App.js"],"names":["useState","useEffect","$","styled","TaskFormToggle","SideBar","HomePage","TaskForm","ListsPage","Main","collection","doc","getDocs","addDoc","deleteDoc","updateDoc","testCollectionRef","db","Body","div","MainRow","App","newTask","setNewTask","allTasks","setAllTasks","createTask","title","notes","date","getTest","data","setAllTasksList","docs","map","id","deleteToDoItem","toDoItemDB","allTasksList","onDragEnd","result","destination","source","draggableId","droppableId","index","newTaskIds","Array","from","splice","newColumn","console","log","handleChange","target","name","value","Date","now","prevNewTask","done","handleSubmit","event","prevAllTasks","prev","handleRemoveDone","e","preventDefault","filter","task","taskToKeep","handleRemoveTask","taskId","handleEditTask","content","handleToggleDone","document","ready","on","toggleClass","localStorage","getItem","JSON","parse","updateToDoItem","testDoc","setItem","stringify","allTasksDoc","newFields","padding","overflow","height"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport $ from 'jquery';\r\n\r\n// import styled components\r\nimport styled from 'styled-components';\r\n// import bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './App.css';\r\n\r\n\r\n// import Toggle Task Form Button\r\nimport TaskFormToggle from './TaskFormToggle';\r\n\r\n//import Sidebar\r\nimport SideBar from './SideBar';\r\nimport HomePage from './HomePage';\r\nimport TaskForm from './TaskForm';\r\nimport ListsPage from './ListsPage';\r\n\r\nimport Main from './Main';\r\n\r\n//database\r\nimport { collection, doc, getDocs, addDoc, deleteDoc, updateDoc } from 'firebase/firestore'\r\nimport { testCollectionRef } from '../db'\r\nimport { db } from '../firebase-config';\r\n\r\n\r\n\r\nconst Body = styled.div`\r\n  padding: 0;\r\n  overflow: hidden;\r\n`\r\n\r\nconst MainRow = styled.div`\r\n  height: 100vh;\r\n  overflow: hidden\r\n`\r\n\r\n\r\n\r\nfunction App() {\r\n  // const allTasksRef = collection(db, \"task\")\r\n\r\n  // useEffect(() => { \r\n  //   const createTask = async () => {\r\n  //     // await addDoc(testCollectionRef, { title: newTask.title , notes: newTask.notes, date: newTask.Date});\r\n\r\n  //     await addDoc(testCollectionRef, {});}\r\n  //     createTask();\r\n  // }, [])\r\n\r\n\r\n  // state of new task input\r\n  const [newTask, setNewTask] = useState({});\r\n  const [allTasks, setAllTasks] = useState(null);\r\n  \r\n\r\n  // upload to db \r\n  const createTask = async () => {\r\n    await addDoc(testCollectionRef, { title: newTask.title, notes: newTask.notes, date: newTask.date});\r\n  }\r\n\r\n  //data retrieveal \r\n  useEffect(() => {\r\n    const getTest = async () => {\r\n      const data = await getDocs(testCollectionRef);\r\n      setAllTasksList(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })))\r\n    }\r\n    getTest();\r\n  }, [])\r\n\r\n  //remove items individually\r\n  const deleteToDoItem = async (id) => {\r\n    const toDoItemDB = doc(db, \"task\", id);\r\n    await deleteDoc(toDoItemDB);\r\n  }\r\n\r\n\r\n  const [allTasksList, setAllTasksList] = useState([])\r\n\r\n  // lists for dnd\r\n  // const [list, setList] = useState({})\r\n  // const [allLists, setAllLists] = useState([])\r\n\r\n  const onDragEnd = result => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const newTaskIds = Array.from(allTasksList);\r\n\r\n    newTaskIds.splice(source.index, 1);\r\n    newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n    const newColumn = newTaskIds;\r\n\r\n    setAllTasksList(newColumn);\r\n    console.log('123')\r\n  }\r\n\r\n  // new task form input\r\n  const handleChange = ({ target }) => {\r\n    // insert corresponding name and input as porperty [name] & value in the newTask object\r\n    const { name, value } = target;\r\n    // generate id for each task\r\n    const id = Date.now();\r\n\r\n    setNewTask((prevNewTask) => ({\r\n      ...prevNewTask,\r\n      [name]: value,\r\n      id: id,\r\n      done: false,\r\n    })\r\n    );\r\n\r\n    console.log(allTasks)\r\n  };\r\n\r\n  //submit task\r\n  const handleSubmit = (event) => {\r\n    // prevent default action\r\n    // event.preventDefault();\r\n\r\n    // shift new task in all tasks list (before previous task(s))\r\n    setAllTasks((prevAllTasks) => ({\r\n      ...prevAllTasks,\r\n      [newTask.id]: newTask,\r\n    })\r\n    \r\n    );\r\n\r\n    // add task id to all tasks list\r\n    setAllTasksList((prev) => ([\r\n      ...prev,\r\n      newTask.id\r\n    ]))\r\n\r\n    // empty the value of newTask\r\n    setNewTask({});\r\n    createTask();\r\n  }\r\n\r\n\r\n  //Remove tasks marked as done\r\n  const handleRemoveDone = e => {\r\n    e.preventDefault();\r\n    setAllTasksList(allTasksList.filter(task => {\r\n      //keep tasks haven't been done on list, for later return\r\n      const taskToKeep = allTasks[task].done === false;\r\n\r\n      // delete task(s) done\r\n      if (allTasks[task].done === true) {\r\n        delete allTasks[task]\r\n      }\r\n      return taskToKeep\r\n    }\r\n    ))\r\n      ;\r\n  }\r\n\r\n  const handleRemoveTask = taskId => {\r\n    delete allTasks[taskId]\r\n    setAllTasksList(allTasksList.filter(task => task !== taskId))\r\n  }\r\n\r\n  // edit task detail\r\n  const handleEditTask = (taskId, content) => {\r\n    setAllTasks(prevAllTasks => ({\r\n      ...prevAllTasks,\r\n      [taskId]: content\r\n    }))\r\n  }\r\n\r\n  // // toggle task done status\r\n  const handleToggleDone = (taskId) => {\r\n    setAllTasks(prevAllTasks => ({\r\n      ...prevAllTasks,\r\n      [taskId]: {\r\n        ...allTasks[taskId],\r\n        done: !allTasks[taskId].done\r\n      }\r\n    }))\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   await addDoc(testCollectionRef, allTasks);\r\n  // }, [allTasks])\r\n\r\n  // Toggle add task form\r\n  useEffect(() => {\r\n    $(document).ready(function () {\r\n      $('#addTask').on(\"click\", function () {\r\n        $(\"#taskForm\").toggleClass(\"active\");\r\n        $(\"#addBtn\").toggleClass(\"active\");\r\n      })\r\n    })\r\n  }, [])\r\n\r\n\r\n  // fetch local data from local storge on page loaded\r\n  useEffect(() => {\r\n    if (!allTasks) {\r\n      // fetch data from local storage\r\n      const data = localStorage.getItem('testing-task');\r\n      // add the parsed data to allTasks\r\n      setAllTasks(JSON.parse(data));\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const updateToDoItem = async (id) => {\r\n      const testDoc = doc(db, \"allTasks\", id)\r\n      // const newFields = allTasks\r\n      await updateDoc(testDoc, {allTasks})\r\n    }})\r\n  //   setAllTasks(null)\r\n  //   updateToDoItem('testtask')\r\n  // }, [allTasks])\r\n  \r\n\r\n  useEffect(() => {\r\n    // fetch data from local storage\r\n    const data = localStorage.getItem('testing-task-list');\r\n    // add the parsed data to allTasks\r\n    setAllTasksList(JSON.parse(data));\r\n  }, [])\r\n\r\n  // store tasks to local storage while adding task\r\n  useEffect(() => {\r\n    localStorage.setItem('testing-task', JSON.stringify(allTasks))\r\n  }, [allTasks, allTasksList])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('testing-task-list', JSON.stringify(allTasksList))\r\n  }, [allTasksList])\r\n\r\n\r\n\r\n\r\n    const updateDoc = async () => {\r\n      const allTasksDoc = doc(db, \"testAllTasks\", \"123\");\r\n      const newFields = {allTasks: 'react'}\r\n      await updateDoc(newFields, allTasksDoc)  \r\n    }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TaskFormToggle />\r\n      <div className='container-fluid' style={{ padding: 0, overflow: 'hidden' }}>\r\n        <MainRow className='row'>\r\n          <SideBar />\r\n\r\n\r\n          {/* <Main /> */}\r\n          <main className=\"col\">\r\n            <div className=\"row\" style={{ height: '100vh' }}>\r\n\r\n              <HomePage\r\n                allTasksList={allTasksList}\r\n                allTasks={allTasks}\r\n                handleRemoveDone={handleRemoveDone}\r\n                onDragEnd={onDragEnd}\r\n                handleEditTask={handleEditTask}\r\n                handleToggleDone={handleToggleDone}\r\n                handleRemoveTask={handleRemoveTask}\r\n                deleteToDoItem={deleteToDoItem}\r\n              />\r\n\r\n              <ListsPage />\r\n\r\n\r\n            </div>\r\n\r\n          </main>\r\n\r\n          <TaskForm\r\n            newTask={newTask}\r\n            handleSubmit={handleSubmit}\r\n            handleChange={handleChange}\r\n            updateDoc={updateDoc}\r\n          />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </MainRow>\r\n\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}