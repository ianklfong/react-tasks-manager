{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\genhk\\\\OneDrive\\\\Desktop\\\\ellie's\\\\taskm\\\\react-tasks-manager\\\\task-manager\\\\src\\\\Components\\\\AllTaskList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Task from './Task';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TasksContainer = styled.div`\n    overflow: hidden;\n`;\n_c = TasksContainer;\n\nfunction AllTaskList(_ref) {\n  _s();\n\n  let {\n    allTasksList,\n    onDragEnd,\n    allTasks,\n    handleEditTask,\n    handleToggleDone,\n    handleRemoveTask\n  } = _ref;\n  const [toDoItem, setToDoItem] = useState([]);\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    className: \"mx-5\",\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row  task-list\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"allTask\",\n          type: \"allTask\",\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(TasksContainer, {\n            className: \"mx-5 h-100\",\n            ...provided.droppableProps,\n            ref: provided.innerRef // isDraggingOver={snapshot.isDraggingOver}    \n            ,\n            children: [!allTasks && !allTasksList ? allTasksList.map((taskId, index) => /*#__PURE__*/_jsxDEV(Task, {\n              index: index,\n              task: allTasks[taskId],\n              handleEditTask: handleEditTask,\n              handleToggleDone: handleToggleDone,\n              handleRemoveTask: handleRemoveTask\n            }, allTasks[taskId].id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 33\n            }, this)) : console.log('h1'), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AllTaskList, \"ixKmNBws88r8iX+3rKU9StKKOUs=\");\n\n_c2 = AllTaskList;\nexport default AllTaskList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TasksContainer\");\n$RefreshReg$(_c2, \"AllTaskList\");","map":{"version":3,"sources":["C:/Users/genhk/OneDrive/Desktop/ellie's/taskm/react-tasks-manager/task-manager/src/Components/AllTaskList.jsx"],"names":["React","useState","DragDropContext","Droppable","Task","styled","TasksContainer","div","AllTaskList","allTasksList","onDragEnd","allTasks","handleEditTask","handleToggleDone","handleRemoveTask","toDoItem","setToDoItem","provided","snapshot","droppableProps","innerRef","map","taskId","index","id","console","log","placeholder"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,qBAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,MAAMC,cAAc,GAAGD,MAAM,CAACE,GAAI;AAClC;AACA,CAFA;KAAMD,c;;AAKN,SAASE,WAAT,OAAgH;AAAA;;AAAA,MAA3F;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,SAAhB;AAA2BC,IAAAA,QAA3B;AAAqCC,IAAAA,cAArC;AAAqDC,IAAAA,gBAArD;AAAuEC,IAAAA;AAAvE,GAA2F;AAC5G,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;AAGA,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAC,MAA3B;AAAkC,IAAA,SAAS,EAAES,SAA7C;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BAEI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BAGQ,QAAC,SAAD;AACI,UAAA,WAAW,EAAC,SADhB;AAEI,UAAA,IAAI,EAAC,SAFT;AAAA,oBAIC,CAACO,QAAD,EAAWC,QAAX,kBACG,QAAC,cAAD;AACI,YAAA,SAAS,EAAC,YADd;AAAA,eAEQD,QAAQ,CAACE,cAFjB;AAGI,YAAA,GAAG,EAAEF,QAAQ,CAACG,QAHlB,CAII;AAJJ;AAAA,uBAOK,CAACT,QAAD,IAAa,CAACF,YAAd,GACCA,YAAY,CAACY,GAAb,CAAiB,CAACC,MAAD,EAASC,KAAT,kBACf,QAAC,IAAD;AAEI,cAAA,KAAK,EAAEA,KAFX;AAGI,cAAA,IAAI,EAAEZ,QAAQ,CAACW,MAAD,CAHlB;AAII,cAAA,cAAc,EAAEV,cAJpB;AAKI,cAAA,gBAAgB,EAAEC,gBALtB;AAMI,cAAA,gBAAgB,EAAEC;AANtB,eACSH,QAAQ,CAACW,MAAD,CAAR,CAAiBE,EAD1B;AAAA;AAAA;AAAA;AAAA,oBADF,CADD,GAUCC,OAAO,CAACC,GAAR,CAAY,IAAZ,CAjBN,EAoBKT,QAAQ,CAACU,WApBd;AAAA;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA;AAHR;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AA+CH;;GAnDQnB,W;;MAAAA,W;AAqDT,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport Task from './Task';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst TasksContainer = styled.div`\r\n    overflow: hidden;\r\n`\r\n\r\n\r\nfunction AllTaskList({ allTasksList, onDragEnd, allTasks, handleEditTask, handleToggleDone, handleRemoveTask }) {\r\n    const [toDoItem, setToDoItem] = useState([]);\r\n\r\n\r\n    return (\r\n        <DragDropContext className='mx-5' onDragEnd={onDragEnd}>\r\n        <div className=\"row  task-list\">\r\n            {/* start of task list */}\r\n            <div className=\"col-12\">\r\n\r\n                {/* start of task container */}\r\n                    <Droppable\r\n                        droppableId=\"allTask\"\r\n                        type=\"allTask\"\r\n                    >\r\n                    {(provided, snapshot) => (\r\n                        <TasksContainer\r\n                            className='mx-5 h-100'\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                            // isDraggingOver={snapshot.isDraggingOver}    \r\n                        >\r\n                            \r\n                            {!allTasks && !allTasksList \r\n                            ? allTasksList.map((taskId, index) => \r\n                                <Task \r\n                                    key={allTasks[taskId].id}\r\n                                    index={index}\r\n                                    task={allTasks[taskId]}\r\n                                    handleEditTask={handleEditTask}\r\n                                    handleToggleDone={handleToggleDone}\r\n                                    handleRemoveTask={handleRemoveTask}\r\n                                />)\r\n                            : console.log('h1')\r\n                            }\r\n\r\n                            {provided.placeholder}\r\n                        </TasksContainer>  \r\n\r\n                    )}\r\n\r\n                    </Droppable>\r\n        \r\n                {/* end of task container */}\r\n\r\n            </div>\r\n            {/* end of task list */}\r\n        </div>\r\n        </DragDropContext>\r\n\r\n    );\r\n}\r\n\r\nexport default AllTaskList;"]},"metadata":{},"sourceType":"module"}